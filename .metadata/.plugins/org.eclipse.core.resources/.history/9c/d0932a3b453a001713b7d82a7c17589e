package dao;
import dao.DBC;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import beans.BookBean;
import beans.UserBean;
import beans.OrderBean;

import dao.OrderDAO;

public class BookDAO {
	
	private DBC dbc;//连接的基类
	private Statement bstmt;//用于更新数据库
	private ResultSet brest;//查询结果集
	private int BookNum;//用于返回某次查询后的书籍数量,用的时候要注意
	
	public BookDAO(){
		dbc=new DBC();
		bstmt=dbc.creStatement();
		brest=null;
		BookNum = 0;
	}

	
	//添加书籍信息传入的参数book必须是正确的,否则会出错,每一项都必须有值且正确，这个参数正确性由Servlet来保证
	//一开始给定默认图片(数据库里面设置默认值),增加图片路径单独处理,在上传完图片后处理,调用更新图片路径信息的函数
	public boolean addBook(BookBean book){
		int rowCount=0;
		if(book!=null){
			try{
				rowCount=bstmt.executeUpdate("insert into books(bTitle,bAuthor,bDescription,bCount,bPublisher," +
						"bLanguage,bTime,cID,bImg) values('" +
						book.getbTitle()+"','"+book.getbAuthor()+"','"+book.getbDescription()+"',"+book.getbCount()+
						",'"+book.getbPublisher()+"','"+book.getbLanguage()+"','"+book.getbTime()+"',"+book.getcID()+
						")");
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
		return rowCount==0?false:true;
	}
	
	public boolean delBook(Integer bID){
		int rowCount=0;
		try{
			if(bID!=null){
				rowCount=bstmt.executeUpdate("delete from books where bID = "+bID);
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return rowCount==0?false:true;
	}
	
	
	//更新书籍信息传入的参数book必须是正确的,否则会出错,每一项都必须有值且正确，这个参数正确性由Servlet来保证
	//更换图片路径单独处理,因为更换路径的前提是有一个上传图片的操作
	public boolean updateBook(BookBean book){
		int rowCount=0;
		if(book!=null && !DBC.isNullOrEmpty(book.getbID())){
			try{
				rowCount=bstmt.executeUpdate("update books set "+
						"bTitle='"+book.getbTitle()+"',bAuthor='"+book.getbAuthor()+"',bDescription='"+
						book.getbDescription()+"',bCount="+book.getbCount()+",bPublisher='"+book.getbPublisher()+
						"',bLanguage='"+book.getbLanguage()+"',bTime='"+book.getbTime()+"',cID="+book.getcID()+
						",bSoldNum="+book.getbSoldNum()+" where bID="+book.getbID());
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
		return rowCount==0?false:true;
	}

	//更换书籍图片路径信息
	public boolean updateBookImg(Integer bID,String bImg){
		int rowCount=0;
		if(bID!=null && !DBC.isNullOrEmpty(bImg)){
			try{
				rowCount=bstmt.executeUpdate("update books set bImg='"+bImg+
						"' where bID="+bID);
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
		return rowCount==0?false:true;
	}
	
	//根据书本ID来查找书籍
	public BookBean findBookWithID(Integer bID){
		try{
			if(bID!=null){
				brest=dbc.creResultSet("select * from books where bID="+bID);
				if(brest==null || !brest.next()){
					return null;
				}
				else{
					BookBean book=new BookBean();
					book.setbID(brest.getString("bID"));
					book.setbTitle(brest.getString("bTitle"));
					book.setbAuthor(brest.getString("bAuthor"));
					book.setbCount(brest.getString("bCount"));
					book.setbDescription(brest.getString("bDescription"));
					book.setbPublisher(brest.getString("bPublisher"));
					book.setbLanguage(brest.getString("bLanguage"));
					book.setbTime(brest.getString("bTime"));
					book.setcID(brest.getString("cID"));
					book.setbImg(brest.getString("bImg"));
					book.setbSoldNum(brest.getString("bSoldNum"));
					return book;
				}
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	//根据书名模糊查询,返回第PageNum页 不超过PageSize的list,这里会对传入的PageNum，根据PageSize大小做一次计算，如果小于1则设置为1，大于最多显示页数则显示最大页数
	public List<BookBean> findBooksWithName(String title,Integer pageNum,Integer pageSize){
		List<BookBean> list=null;
		if(pageNum==null || pageSize==null){
			return list;
		}
		try{
			brest=dbc.creResultSet("select count(*) from books where bTitle like '%"+title+"%'");//返回记录数目
			int rowCount=0;
			if(brest!=null && brest.next()){
				rowCount=brest.getInt(1);//获取记录数
			}
			else{
				return list;
			}
			int m_pageSize=pageSize;
			int MaxPageNum=(rowCount%m_pageSize==0)?(rowCount/m_pageSize):(rowCount/m_pageSize+1);
			int m_pageNum=pageNum;
			if(m_pageNum<1){
				m_pageNum=1;
			}
			else if(m_pageNum>MaxPageNum){
				m_pageNum=MaxPageNum;
			}
			if(!DBC.isNullOrEmpty(title)){
				brest=dbc.creResultSet("select * from books where bTitle like binary '%"+title+"%' limit "+
						(m_pageNum-1)*m_pageSize+","+m_pageSize);
				if(brest==null || !brest.next()){
					return list;
				}
				BookBean temp=null;
				list=new ArrayList<BookBean>();
				BookNum=0;//数量清零
				do{
					temp=new BookBean();
					temp.setbID(brest.getString("bID"));
					temp.setbTitle(brest.getString("bTitle"));
					temp.setbAuthor(brest.getString("bAuthor"));
					temp.setbCount(brest.getString("bCount"));
					temp.setbDescription(brest.getString("bDescription"));
					temp.setbPublisher(brest.getString("bPublisher"));
					temp.setbLanguage(brest.getString("bLanguage"));
					temp.setbTime(brest.getString("bTime"));
					temp.setcID(brest.getString("cID"));
					temp.setbImg(brest.getString("bImg"));
					temp.setbSoldNum(brest.getString("bSoldNum"));
					list.add(temp);
					BookNum++;
				}while(brest.next());
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	//返回出版时间最近的第PageNum页 不超过PageSize的list,这里会对传入的PageNum，根据PageSize大小做一次计算，如果小于1则设置为1，大于最多显示页数则显示最大页数
	public List<BookBean> getNearlyBooks(Integer pageNum,Integer pageSize){
		List<BookBean> list=null;
		if(pageNum==null || pageSize==null){
			return list;
		}
		try{
			int rowCount=getBooksCount();
			if(rowCount==0){
				return list;
			}
			int m_pageSize=pageSize;
			int MaxPageNum=(rowCount%m_pageSize==0)?(rowCount/m_pageSize):(rowCount/m_pageSize+1);
			int m_pageNum=pageNum;
			if(m_pageNum<1){
				m_pageNum=1;
			}
			else if(m_pageNum>MaxPageNum){
				m_pageNum=MaxPageNum;
			}
			brest=dbc.creResultSet("select * from books order by bTime desc limit "+
					(m_pageNum-1)*m_pageSize+","+m_pageSize);
			if(brest==null || !brest.next()){
				return list;
			}
			BookBean temp=null;
			list=new ArrayList<BookBean>();
			BookNum=0;//数量清零
			do{
				temp=new BookBean();
				temp.setbID(brest.getString("bID"));
				temp.setbTitle(brest.getString("bTitle"));
				temp.setbAuthor(brest.getString("bAuthor"));
				temp.setbCount(brest.getString("bCount"));
				temp.setbDescription(brest.getString("bDescription"));
				temp.setbPublisher(brest.getString("bPublisher"));
				temp.setbLanguage(brest.getString("bLanguage"));
				temp.setbTime(brest.getString("bTime"));
				temp.setcID(brest.getString("cID"));
				temp.setbImg(brest.getString("bImg"));
				temp.setbSoldNum(brest.getString("bSoldNum"));
				list.add(temp);
				BookNum++;
			}while(brest.next());
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	//获得热卖书籍
	public List<BookBean> getHotSoldBooks(Integer pageNum,Integer pageSize){
		List<BookBean> list=null;
		if(pageNum==null || pageSize==null){
			return list;
		}
		try{
			int rowCount=getBooksCount();
			if(rowCount==0){
				return list;
			}
			int m_pageSize=pageSize;
			int MaxPageNum=(rowCount%m_pageSize==0)?(rowCount/m_pageSize):(rowCount/m_pageSize+1);
			int m_pageNum=pageNum;
			if(m_pageNum<1){
				m_pageNum=1;
			}
			else if(m_pageNum>MaxPageNum){
				m_pageNum=MaxPageNum;
			}
			brest=dbc.creResultSet("select * from books order by bSoldNum desc limit "+
					(m_pageNum-1)*m_pageSize+","+m_pageSize);
			if(brest==null || !brest.next()){
				return list;
			}
			BookBean temp=null;
			list=new ArrayList<BookBean>();
			BookNum=0;//数量清零
			do{
				temp=new BookBean();
				temp.setbID(brest.getString("bID"));
				temp.setbTitle(brest.getString("bTitle"));
				temp.setbAuthor(brest.getString("bAuthor"));
				temp.setbCount(brest.getString("bCount"));
				temp.setbDescription(brest.getString("bDescription"));
				temp.setbPublisher(brest.getString("bPublisher"));
				temp.setbLanguage(brest.getString("bLanguage"));
				temp.setbTime(brest.getString("bTime"));
				temp.setcID(brest.getString("cID"));
				temp.setbImg(brest.getString("bImg"));
				temp.setbSoldNum(brest.getString("bSoldNum"));
				list.add(temp);
				BookNum++;
			}while(brest.next());
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	//根据订单ID来找这个订单对应的书籍信息
	public List<BookBean> findBooksWithOrderID(Integer oID){
		List<BookBean> list=new ArrayList<BookBean>();
		BookBean temp=null;
		String bIDs=null;
		if(oID!=null){
			OrderDAO oDAO=new OrderDAO();
			OrderBean order=oDAO.findOrderWithID(oID);
			bIDs=order.getoBookIDs();
			oDAO.CloseBookDAO();
		}
		else{
			return null;
		}
		if(DBC.isNullOrEmpty(bIDs)){
			return null;
		}
		else{
			String[] bookIDs=bIDs.split("-");
			for(int i=0;i<bookIDs.length;i++){
				temp=findBookWithID(Integer.parseInt(bookIDs[i]));
				list.add(temp);
			}
		}
		return list;
	}
	
	
	//根据分类ID查询书籍信息
	public List<BookBean> findBooksWithClassficationID(Integer cID,Integer pageNum,Integer pageSize){
		List<BookBean> list=null;
		if(pageNum==null || pageSize==null || cID==null){
			return list;
		}
		try{
			int rowCount=getBooksCount();
			if(rowCount==0){
				return list;
			}
			int m_pageSize=pageSize;
			int MaxPageNum=(rowCount%m_pageSize==0)?(rowCount/m_pageSize):(rowCount/m_pageSize+1);
			int m_pageNum=pageNum;
			if(m_pageNum<1){
				m_pageNum=1;
			}
			else if(m_pageNum>MaxPageNum){
				m_pageNum=MaxPageNum;
			}
			brest=dbc.creResultSet("select * from books where cID="+cID+" limit "+
					(m_pageNum-1)*m_pageSize+","+m_pageSize);
			if(brest==null || !brest.next()){
				return list;
			}
			BookBean temp=null;
			list=new ArrayList<BookBean>();
			BookNum=0;//数量清零
			do{
				temp=new BookBean();
				temp.setbID(brest.getString("bID"));
				temp.setbAuthor(brest.getString("bAuthor"));
				temp.setbCount(brest.getString("bCount"));
				temp.setbDescription(brest.getString("bDescription"));
				temp.setbPublisher(brest.getString("bPublisher"));
				temp.setbLanguage(brest.getString("bLanguage"));
				temp.setbTime(brest.getString("bTime"));
				temp.setcID(brest.getString("cID"));
				temp.setbImg(brest.getString("bImg"));
				temp.setbSoldNum(brest.getString("bSoldNum"));
				list.add(temp);
				BookNum++;
			}while(brest.next());
		}catch(SQLException e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	
	//返回书籍的记录数目
	public int getBooksCount(){
		int rowCount=0;
		try{
			brest=dbc.creResultSet("select count(*) from books");//返回记录数目
			if(brest!=null && brest.next()){
				rowCount=brest.getInt(1);//获取记录数
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return rowCount;
	}
	
	
	//必须在执行完查询操作之后才可以调用这个
	public int getBookNumAfterSearch(){
		return this.BookNum;
	}
	
	public void CloseBookDAO(){
		brest=null;
		bstmt=null;
		BookNum = 0;
		dbc.CloseAll();
	}
}
