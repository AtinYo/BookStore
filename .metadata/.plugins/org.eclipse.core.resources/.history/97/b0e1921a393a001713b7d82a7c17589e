package servlets;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.*;
import beans.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.ArrayList;
import java.util.List;

public class MainServlet extends HttpServlet {

	/**
	 * Constructor of the object.
	 */
	public MainServlet() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request,response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html");
		
		//这里是根据主页传过来要显示的最新上架书本数量Num来返回一个list即可
		Integer currentPage;
		Integer pageSize = 5;
		if(request.getParameter("pageNext")!=null){
			currentPage=Integer.parseInt(request.getParameter("pageNext"));
		}
		else{
			currentPage=1;
		}
		request.getSession().setAttribute("MainPage_currentPage", currentPage);
		request.getSession().setAttribute("MainPage_pageSize", pageSize);
		List<BookBean> bList=null;
		BookDAO bDAO=new BookDAO();
		//根据查询的方式来决定返回结果集
		if(!DBC.isNullOrEmpty(request.getParameter("recommend"))){
			
		}
		else if(!DBC.isNullOrEmpty(request.getParameter("hotsold"))){
			
		}
		else{//默认为最新上架新
			
		}
		bList=bDAO.getNearlyBooks(currentPage,pageSize);
		request.getSession().setAttribute("MainPage_BookList",bList);
		int count = bDAO.getBooksCount();
		int pageNum = 1;
		if(count > 0){
			pageNum = count%pageSize==0?count/pageSize:count/pageSize+1;
		}
		request.getSession().setAttribute("MainPage_pageNum", pageNum);
		bDAO.CloseBookDAO();
		
		List<ClassficationBean> cList=null;
		ClassficationDAO cDAO=new ClassficationDAO();
		cList=cDAO.findAllClassfication();
		request.getSession().setAttribute("MainPage_ClassficationList",cList);
		cDAO.CloseClassficationDAO();
		
		response.sendRedirect("/BookStore/JSP/pages/MainPage.jsp");//重定向到主页面
	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		// Put your code here
	}

}
