package servlets;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.*;
import beans.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.ArrayList;
import java.util.List;

public class MainServlet extends HttpServlet {

	/**
	 * Constructor of the object.
	 */
	public MainServlet() {
		super();
	}

	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doPost(request,response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html");
		
		//这里是根据主页传过来要显示的最新上架书本数量Num来返回一个list即可
		Integer currentPage;
		Integer pageSize = 5;
		if(request.getParameter("pageNext")!=null){
			currentPage=Integer.parseInt(request.getParameter("pageNext"));
		}
		else{
			currentPage=1;
		}
		request.getSession().setAttribute("MainPage_currentPage", currentPage);
		request.getSession().setAttribute("MainPage_pageSize", pageSize);
		List<BookBean> bList=null;
		BookDAO bDAO=new BookDAO();
		Integer SelectNavBarID=0;
		Integer SelectCategoryID=-1;
		//根据查询的方式来决定返回结果集
		if(!DBC.isNullOrEmpty(request.getParameter("SelectCategoryID"))){//点击了按分类显示
			SelectCategoryID=Integer.parseInt(request.getParameter("SelectCategoryID"));
			request.getSession().setAttribute("MainPage_SelectCategoryID", SelectCategoryID);
			request.getSession().setAttribute("MainPage_SelectNavBarID", -1);//置空表示没有选择导航栏
			bList=bDAO.findBooksWithClassficationID(SelectCategoryID, currentPage, pageSize);
		}
		else if(!DBC.isNullOrEmpty(request.getParameter("SelectNavBarID"))){//点击了按导航选项显示
			SelectNavBarID=Integer.parseInt(request.getParameter("SelectNavBarID"));
			request.getSession().setAttribute("SelectCategoryID", -1);//置空表示没有选择分类
			request.getSession().setAttribute("MainPage_SelectNavBarID", SelectNavBarID);
			switch(SelectNavBarID){
				case 0://最近上架
					bList=bDAO.getNearlyBooks(currentPage,pageSize);
					break;
				case 1://为您推荐
					//还没写，需要写一个根据用户最近购买过的书籍来推荐的函数，放在BDAO里面，但是要访问Order
					break;
				case 2://热卖图书
					bList=bDAO.getHotSoldBooks(currentPage, pageSize);
					break;
				default:
					break;
			}
		}
		else{//既没有点击分类也没有点击导航，那么就根据当前选择的类型来做处理
			if(request.getSession().getAttribute("MainPage_SelectCategoryID") != null && (Integer)request.getSession().getAttribute("MainPage_SelectCategoryID") != -1){
				SelectCategoryID=(Integer)request.getSession().getAttribute("MainPage_SelectCategoryID");
				bList=bDAO.findBooksWithClassficationID(SelectCategoryID, currentPage, pageSize);
			}
			else if(request.getSession().getAttribute("MainPage_SelectNavBarID") != null && (Integer)request.getSession().getAttribute("MainPage_SelectNavBarID") != -1){
				SelectNavBarID=(Integer)request.getSession().getAttribute("MainPage_SelectNavBarID");
				bList=bDAO.getNearlyBooks(currentPage,pageSize);
			}
			else{//默认为选择最新上架
				request.getSession().setAttribute("MainPage_SelectNavBarID",1);
				bList=bDAO.getNearlyBooks(currentPage,pageSize);
			}
		}
		request.getSession().setAttribute("MainPage_BookList",bList);
		int count = bList.size();
		int pageNum = 1;
		if(count > 0){
			pageNum = count%pageSize==0?count/pageSize:count/pageSize+1;
		}
		request.getSession().setAttribute("MainPage_pageNum", pageNum);
		bDAO.CloseBookDAO();
		
		List<ClassficationBean> cList=null;
		ClassficationDAO cDAO=new ClassficationDAO();
		cList=cDAO.findAllClassfication();
		request.getSession().setAttribute("MainPage_ClassficationList",cList);
		cDAO.CloseClassficationDAO();
		
		response.sendRedirect("/BookStore/JSP/pages/MainPage.jsp");//重定向到主页面
	}

	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		// Put your code here
	}

}
